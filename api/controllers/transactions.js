/**
 * GET /api/transactions
 * ---------------------
 * Retrieve a list of all transactions.
 *
 * Optional Query Parameters:
 * - type: Filter transactions by type. Valid values are "Stake", "Borrow", or "Lend".
 *
 * Success Response:
 * - 200 OK: Returns an array of transactions (filtered if query param is used).
 *
 * Error Response:
 * - 400 Bad Request: Returned if an invalid type value is provided.
 */

let transactions = [
  {
    id: "1",
    username: "annamaria",
    transactionType: "Stake",
    token: "ETH",
    amount: 1000,
    date: "2025-06-05"
  }
];

export const index = (req, res) => {

   console.log("âœ… GET /api/transactions called");
   const { type } = req.query;
   if (type && !["Stake", "Borrow", "Lend"].includes(type)) {
    return res.status(400).json({ error: "Invalid transaction type" });
   }

   const filteredTransactions = type
        ? transactions.filter(transaction => transaction.transactionType === type)
        : transactions;

        res.status(200).json(filteredTransactions);
}

/**
 * GET /api/transactions/:id
 * -------------------------
 * Retrieve a specific transaction by its ID.
 *
 * URL Parameters:
 * - id: The unique identifier of the transaction to retrieve.
 *
 * Success Response:
 * - 200 OK: Returns the transaction object.
 *
 * Error Response:
 * - 404 Not Found: Returned if no transaction exists with the given ID.
 */
export const fetchById = (req, res) => {

    const { id } = req.params;
    const transaction = transactions.find(t => t.id === id);

    if (!transaction) {
        return res.status(404).json( { error: "Transaction not found" });
    }

    res.status(200).json(transaction);
}

/**
 * POST /api/transactions
 * ----------------------
 * Create a new transaction.
 *
 * Request Body:
 * - transactionType (string): Must be one of "Stake", "Borrow", or "Lend".
 * - token (string): Must be a non-empty string.
 * - amount (number): Must be a positive number.
 * - Note: The 'id' is generated by the backend and should not be included in the request.
 *
 * Success Response:
 * - 201 Created: Returns the newly created transaction object.
 *
 * Error Response:
 * - 400 Bad Request: Returned if validation fails (e.g., invalid type, empty token, or non-positive amount).
 */
export const create = (req, res) => {
    
    const { username, transactionType, token, amount } = req.body;

     if (!username || typeof username !== "string") {
        return res.status(400).json({ message: "Username is required" });
    };
    
    if (!["Stake", "Borrow", "Lend"].includes(transactionType)) {
        return res.status(400).json( { error: "Invalid transaction type" });
    };

    if (!token || typeof token !== "string" || token.trim() === "") {
        return res.status(400).json( { error: "Token mustn't be empty" });
    };

    if (typeof amount !== "number" || amount <=0  || isNaN(amount)) {
        return res.status(400).json( { error: "Amount must be a positive number" });
    };

    const newTransaction = {
        id: Date.now().toString(),
        username,
        transactionType,
        token,
        amount,
        date: new Date().toISOString().split("T")[0]
    };
    transactions.push(newTransaction);
    res.status(201).json(newTransaction);
};


export const update = (req, res) => {
    const { id } = req.params;
    const { username, transactionType, token, amount } = req.body;
    const transaction = transactions.find(t => t.id === id);

    if (!transaction) {
        return res.status(404).json( { error: "Transaction not found" });
    };

    if (!username || typeof username !== "string") {
        return res.status(400).json( { message: "Username is required" });
    };

    if (!["Stake", "Borrow", "Lend"].includes(transactionType)) {
        return res.status(400).json( { error: "Invalid transaction type" });
    };

    if (!token || typeof token !== "string" || token.trim() === "") {
        return res.status(400).json( { error: "Token mustn't be empty" });
    };

    if (typeof amount !== "number" || amount <=0  || isNaN(amount)) {
        return res.status(400).json( { error: "Amount must be a positive number" });
    };

    transaction.username = username;
    transaction.transactionType = transactionType;
    transaction.token = token;
    transaction.amount = amount;
    transaction.date = new Date().toISOString().split("T")[0];

    res.status(200).json(transaction);
}

export const remove = (req, res) => {
    const { id } = req.params;
    const index = transactions.findIndex(t => t.id === id);

    if (index === -1) {
        return res.status(404).json( { error: "Transaction not found" });
    }

    transactions.splice(index, 1);
    res.status(204).send();
}